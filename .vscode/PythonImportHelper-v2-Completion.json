[
    {
        "label": "runpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "runpy",
        "description": "runpy",
        "detail": "runpy",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "site",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "site",
        "description": "site",
        "detail": "site",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "CurrentUser",
        "importPath": "app.api.deps",
        "description": "app.api.deps",
        "isExtraImport": true,
        "detail": "app.api.deps",
        "documentation": {}
    },
    {
        "label": "SessionDep",
        "importPath": "app.api.deps",
        "description": "app.api.deps",
        "isExtraImport": true,
        "detail": "app.api.deps",
        "documentation": {}
    },
    {
        "label": "init_super_client",
        "importPath": "app.api.deps",
        "description": "app.api.deps",
        "isExtraImport": true,
        "detail": "app.api.deps",
        "documentation": {}
    },
    {
        "label": "item",
        "importPath": "app.crud",
        "description": "app.crud",
        "isExtraImport": true,
        "detail": "app.crud",
        "documentation": {}
    },
    {
        "label": "Item",
        "importPath": "app.schemas",
        "description": "app.schemas",
        "isExtraImport": true,
        "detail": "app.schemas",
        "documentation": {}
    },
    {
        "label": "ItemCreate",
        "importPath": "app.schemas",
        "description": "app.schemas",
        "isExtraImport": true,
        "detail": "app.schemas",
        "documentation": {}
    },
    {
        "label": "ItemUpdate",
        "importPath": "app.schemas",
        "description": "app.schemas",
        "isExtraImport": true,
        "detail": "app.schemas",
        "documentation": {}
    },
    {
        "label": "Item",
        "importPath": "app.schemas",
        "description": "app.schemas",
        "isExtraImport": true,
        "detail": "app.schemas",
        "documentation": {}
    },
    {
        "label": "ItemCreate",
        "importPath": "app.schemas",
        "description": "app.schemas",
        "isExtraImport": true,
        "detail": "app.schemas",
        "documentation": {}
    },
    {
        "label": "ItemUpdate",
        "importPath": "app.schemas",
        "description": "app.schemas",
        "isExtraImport": true,
        "detail": "app.schemas",
        "documentation": {}
    },
    {
        "label": "Token",
        "importPath": "app.schemas",
        "description": "app.schemas",
        "isExtraImport": true,
        "detail": "app.schemas",
        "documentation": {}
    },
    {
        "label": "Token",
        "importPath": "app.schemas",
        "description": "app.schemas",
        "isExtraImport": true,
        "detail": "app.schemas",
        "documentation": {}
    },
    {
        "label": "items",
        "importPath": "app.api.api_v1.endpoints",
        "description": "app.api.api_v1.endpoints",
        "isExtraImport": true,
        "detail": "app.api.api_v1.endpoints",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "Annotated",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "ClassVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "ClassVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "ClassVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "OAuth2PasswordBearer",
        "importPath": "fastapi.security",
        "description": "fastapi.security",
        "isExtraImport": true,
        "detail": "fastapi.security",
        "documentation": {}
    },
    {
        "label": "AuthApiError",
        "importPath": "gotrue.errors",
        "description": "gotrue.errors",
        "isExtraImport": true,
        "detail": "gotrue.errors",
        "documentation": {}
    },
    {
        "label": "AsyncClient",
        "importPath": "supabase._async.client",
        "description": "supabase._async.client",
        "isExtraImport": true,
        "detail": "supabase._async.client",
        "documentation": {}
    },
    {
        "label": "create_client",
        "importPath": "supabase._async.client",
        "description": "supabase._async.client",
        "isExtraImport": true,
        "detail": "supabase._async.client",
        "documentation": {}
    },
    {
        "label": "AsyncClient",
        "importPath": "supabase._async.client",
        "description": "supabase._async.client",
        "isExtraImport": true,
        "detail": "supabase._async.client",
        "documentation": {}
    },
    {
        "label": "AsyncClient",
        "importPath": "supabase._async.client",
        "description": "supabase._async.client",
        "isExtraImport": true,
        "detail": "supabase._async.client",
        "documentation": {}
    },
    {
        "label": "AsyncClient",
        "importPath": "supabase._async.client",
        "description": "supabase._async.client",
        "isExtraImport": true,
        "detail": "supabase._async.client",
        "documentation": {}
    },
    {
        "label": "AsyncClient",
        "importPath": "supabase._async.client",
        "description": "supabase._async.client",
        "isExtraImport": true,
        "detail": "supabase._async.client",
        "documentation": {}
    },
    {
        "label": "AsyncClient",
        "importPath": "supabase._async.client",
        "description": "supabase._async.client",
        "isExtraImport": true,
        "detail": "supabase._async.client",
        "documentation": {}
    },
    {
        "label": "create_client",
        "importPath": "supabase._async.client",
        "description": "supabase._async.client",
        "isExtraImport": true,
        "detail": "supabase._async.client",
        "documentation": {}
    },
    {
        "label": "ClientOptions",
        "importPath": "supabase.lib.client_options",
        "description": "supabase.lib.client_options",
        "isExtraImport": true,
        "detail": "supabase.lib.client_options",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "app.core.config",
        "description": "app.core.config",
        "isExtraImport": true,
        "detail": "app.core.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "app.core.config",
        "description": "app.core.config",
        "isExtraImport": true,
        "detail": "app.core.config",
        "documentation": {}
    },
    {
        "label": "UserIn",
        "importPath": "app.schemas.auth",
        "description": "app.schemas.auth",
        "isExtraImport": true,
        "detail": "app.schemas.auth",
        "documentation": {}
    },
    {
        "label": "UserIn",
        "importPath": "app.schemas.auth",
        "description": "app.schemas.auth",
        "isExtraImport": true,
        "detail": "app.schemas.auth",
        "documentation": {}
    },
    {
        "label": "UserIn",
        "importPath": "app.schemas.auth",
        "description": "app.schemas.auth",
        "isExtraImport": true,
        "detail": "app.schemas.auth",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "AnyHttpUrl",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseSettings",
        "importPath": "pydantic_settings",
        "description": "pydantic_settings",
        "isExtraImport": true,
        "detail": "pydantic_settings",
        "documentation": {}
    },
    {
        "label": "AsyncGenerator",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "AsyncGenerator",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Generator",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "asynccontextmanager",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "CreateBase",
        "importPath": "app.schemas.base",
        "description": "app.schemas.base",
        "isExtraImport": true,
        "detail": "app.schemas.base",
        "documentation": {}
    },
    {
        "label": "ResponseBase",
        "importPath": "app.schemas.base",
        "description": "app.schemas.base",
        "isExtraImport": true,
        "detail": "app.schemas.base",
        "documentation": {}
    },
    {
        "label": "UpdateBase",
        "importPath": "app.schemas.base",
        "description": "app.schemas.base",
        "isExtraImport": true,
        "detail": "app.schemas.base",
        "documentation": {}
    },
    {
        "label": "CreateBase",
        "importPath": "app.schemas.base",
        "description": "app.schemas.base",
        "isExtraImport": true,
        "detail": "app.schemas.base",
        "documentation": {}
    },
    {
        "label": "InDBBase",
        "importPath": "app.schemas.base",
        "description": "app.schemas.base",
        "isExtraImport": true,
        "detail": "app.schemas.base",
        "documentation": {}
    },
    {
        "label": "ResponseBase",
        "importPath": "app.schemas.base",
        "description": "app.schemas.base",
        "isExtraImport": true,
        "detail": "app.schemas.base",
        "documentation": {}
    },
    {
        "label": "UpdateBase",
        "importPath": "app.schemas.base",
        "description": "app.schemas.base",
        "isExtraImport": true,
        "detail": "app.schemas.base",
        "documentation": {}
    },
    {
        "label": "CRUDBase",
        "importPath": "app.crud.base",
        "description": "app.crud.base",
        "isExtraImport": true,
        "detail": "app.crud.base",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "gotrue",
        "description": "gotrue",
        "isExtraImport": true,
        "detail": "gotrue",
        "documentation": {}
    },
    {
        "label": "UserAttributes",
        "importPath": "gotrue",
        "description": "gotrue",
        "isExtraImport": true,
        "detail": "gotrue",
        "documentation": {}
    },
    {
        "label": "uvicorn",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uvicorn",
        "description": "uvicorn",
        "detail": "uvicorn",
        "documentation": {}
    },
    {
        "label": "CORSMiddleware",
        "importPath": "fastapi.middleware.cors",
        "description": "fastapi.middleware.cors",
        "isExtraImport": true,
        "detail": "fastapi.middleware.cors",
        "documentation": {}
    },
    {
        "label": "api_router",
        "importPath": "app.api.api_v1.api",
        "description": "app.api.api_v1.api",
        "isExtraImport": true,
        "detail": "app.api.api_v1.api",
        "documentation": {}
    },
    {
        "label": "lifespan",
        "importPath": "app.core.events",
        "description": "app.core.events",
        "isExtraImport": true,
        "detail": "app.core.events",
        "documentation": {}
    },
    {
        "label": "pytest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytest",
        "description": "pytest",
        "detail": "pytest",
        "documentation": {}
    },
    {
        "label": "Faker",
        "importPath": "faker",
        "description": "faker",
        "isExtraImport": true,
        "detail": "faker",
        "documentation": {}
    },
    {
        "label": "Faker",
        "importPath": "faker",
        "description": "faker",
        "isExtraImport": true,
        "detail": "faker",
        "documentation": {}
    },
    {
        "label": "Faker",
        "importPath": "faker",
        "description": "faker",
        "isExtraImport": true,
        "detail": "faker",
        "documentation": {}
    },
    {
        "label": "TestClient",
        "importPath": "starlette.testclient",
        "description": "starlette.testclient",
        "isExtraImport": true,
        "detail": "starlette.testclient",
        "documentation": {}
    },
    {
        "label": "get_auth_header",
        "importPath": "tests.utils",
        "description": "tests.utils",
        "isExtraImport": true,
        "detail": "tests.utils",
        "documentation": {}
    },
    {
        "label": "get_auth_header",
        "importPath": "tests.utils",
        "description": "tests.utils",
        "isExtraImport": true,
        "detail": "tests.utils",
        "documentation": {}
    },
    {
        "label": "crud",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "Item",
        "importPath": "app.schemas.item",
        "description": "app.schemas.item",
        "isExtraImport": true,
        "detail": "app.schemas.item",
        "documentation": {}
    },
    {
        "label": "ItemCreate",
        "importPath": "app.schemas.item",
        "description": "app.schemas.item",
        "isExtraImport": true,
        "detail": "app.schemas.item",
        "documentation": {}
    },
    {
        "label": "ItemUpdate",
        "importPath": "app.schemas.item",
        "description": "app.schemas.item",
        "isExtraImport": true,
        "detail": "app.schemas.item",
        "documentation": {}
    },
    {
        "label": "RotatingFileHandler",
        "importPath": "logging.handlers",
        "description": "logging.handlers",
        "isExtraImport": true,
        "detail": "logging.handlers",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "TestClient",
        "importPath": "fastapi.testclient",
        "description": "fastapi.testclient",
        "isExtraImport": true,
        "detail": "fastapi.testclient",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "app.main",
        "description": "app.main",
        "isExtraImport": true,
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "bin_dir",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "bin_dir = os.path.dirname(abs_file)\nbase = bin_dir[: -len(\"Scripts\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "base",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "base = bin_dir[: -len(\"Scripts\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path)",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"PATH\"]",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV\"]",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV_PROMPT\"]",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "prev_length",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "prev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.path[:]",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "sys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.real_prefix",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "sys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.prefix",
        "kind": 5,
        "importPath": ".venv.Scripts.activate_this",
        "description": ".venv.Scripts.activate_this",
        "peekOfCode": "sys.prefix = base",
        "detail": ".venv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "src.app.api.api_v1.endpoints.items",
        "description": "src.app.api.api_v1.endpoints.items",
        "peekOfCode": "router = APIRouter()\n@router.post(\"/create-item\")\nasync def create_item(item_in: ItemCreate, session: SessionDep) -> Item:\n    return await item.create(session, obj_in=item_in)\n@router.get(\"/read-all-item\")\nasync def read_items(session: SessionDep) -> list[Item]:\n    return await item.get_all(session)\n@router.get(\"/get-by-id/{id}\")\nasync def read_item_by_id(id: str, session: SessionDep) -> Item | None:\n    return await item.get(session, id=id)",
        "detail": "src.app.api.api_v1.endpoints.items",
        "documentation": {}
    },
    {
        "label": "api_router",
        "kind": 5,
        "importPath": "src.app.api.api_v1.api",
        "description": "src.app.api.api_v1.api",
        "peekOfCode": "api_router = APIRouter()\napi_router.include_router(items.router, prefix=\"/items\", tags=[\"items\"])",
        "detail": "src.app.api.api_v1.api",
        "documentation": {}
    },
    {
        "label": "reusable_oauth2",
        "kind": 5,
        "importPath": "src.app.api.deps",
        "description": "src.app.api.deps",
        "peekOfCode": "reusable_oauth2 = OAuth2PasswordBearer(\n    tokenUrl=\"please login by supabase-js to get token\"\n)\nAccessTokenDep = Annotated[str, Depends(reusable_oauth2)]\nasync def get_current_user(access_token: AccessTokenDep) -> UserIn:\n    \"\"\"get current user from access_token and  validate same time\"\"\"\n    if not super_client:\n        raise HTTPException(status_code=500, detail=\"Super client not initialized\")\n    user_rsp = await super_client.auth.get_user(jwt=access_token)\n    if not user_rsp:",
        "detail": "src.app.api.deps",
        "documentation": {}
    },
    {
        "label": "AccessTokenDep",
        "kind": 5,
        "importPath": "src.app.api.deps",
        "description": "src.app.api.deps",
        "peekOfCode": "AccessTokenDep = Annotated[str, Depends(reusable_oauth2)]\nasync def get_current_user(access_token: AccessTokenDep) -> UserIn:\n    \"\"\"get current user from access_token and  validate same time\"\"\"\n    if not super_client:\n        raise HTTPException(status_code=500, detail=\"Super client not initialized\")\n    user_rsp = await super_client.auth.get_user(jwt=access_token)\n    if not user_rsp:\n        logging.error(\"User not found\")\n        raise HTTPException(status_code=404, detail=\"User not found\")\n    return UserIn(**user_rsp.user.model_dump(), access_token=access_token)",
        "detail": "src.app.api.deps",
        "documentation": {}
    },
    {
        "label": "CurrentUser",
        "kind": 5,
        "importPath": "src.app.api.deps",
        "description": "src.app.api.deps",
        "peekOfCode": "CurrentUser = Annotated[UserIn, Depends(get_current_user)]\nasync def get_db(user: CurrentUser) -> AsyncClient:\n    client: AsyncClient | None = None\n    try:\n        client = await create_client(\n            settings.SUPABASE_URL,\n            settings.SUPABASE_KEY,\n            options=ClientOptions(\n                postgrest_client_timeout=30,\n                storage_client_timeout=30,",
        "detail": "src.app.api.deps",
        "documentation": {}
    },
    {
        "label": "SessionDep",
        "kind": 5,
        "importPath": "src.app.api.deps",
        "description": "src.app.api.deps",
        "peekOfCode": "SessionDep = Annotated[AsyncClient, Depends(get_db)]",
        "detail": "src.app.api.deps",
        "documentation": {}
    },
    {
        "label": "Settings",
        "kind": 6,
        "importPath": "src.app.core.config",
        "description": "src.app.core.config",
        "peekOfCode": "class Settings(BaseSettings):\n    API_V1_STR: str = \"/api/v1\"\n    SUPABASE_URL: str = Field(default_factory=lambda: os.getenv(\"SUPABASE_URL\"))\n    SUPABASE_KEY: str = Field(default_factory=lambda: os.getenv(\"SUPABASE_KEY\"))\n    SUPERUSER_EMAIL: str = Field(default_factory=lambda: os.getenv(\"SUPERUSER_EMAIL\"))\n    SUPERUSER_PASSWORD: str = Field(default=lambda: os.getenv(\"SUPERUSER_PASSWORD\"))\n    # SERVER_NAME: str\n    SERVER_HOST: AnyHttpUrl = \"https://localhost\"\n    SERVER_PORT: int = 8000\n    # # TODO: the following  need to follow the newest version of fastapi",
        "detail": "src.app.core.config",
        "documentation": {}
    },
    {
        "label": "log_format",
        "kind": 5,
        "importPath": "src.app.core.config",
        "description": "src.app.core.config",
        "peekOfCode": "log_format = logging.Formatter(\"%(asctime)s : %(levelname)s - %(message)s\")\n# root logger\nroot_logger = logging.getLogger()\nroot_logger.setLevel(logging.INFO)\n# standard stream handler\nstream_handler = logging.StreamHandler()\nstream_handler.setFormatter(log_format)\nroot_logger.addHandler(stream_handler)\nlogger = logging.getLogger(__name__)\nload_dotenv()",
        "detail": "src.app.core.config",
        "documentation": {}
    },
    {
        "label": "root_logger",
        "kind": 5,
        "importPath": "src.app.core.config",
        "description": "src.app.core.config",
        "peekOfCode": "root_logger = logging.getLogger()\nroot_logger.setLevel(logging.INFO)\n# standard stream handler\nstream_handler = logging.StreamHandler()\nstream_handler.setFormatter(log_format)\nroot_logger.addHandler(stream_handler)\nlogger = logging.getLogger(__name__)\nload_dotenv()\nclass Settings(BaseSettings):\n    API_V1_STR: str = \"/api/v1\"",
        "detail": "src.app.core.config",
        "documentation": {}
    },
    {
        "label": "stream_handler",
        "kind": 5,
        "importPath": "src.app.core.config",
        "description": "src.app.core.config",
        "peekOfCode": "stream_handler = logging.StreamHandler()\nstream_handler.setFormatter(log_format)\nroot_logger.addHandler(stream_handler)\nlogger = logging.getLogger(__name__)\nload_dotenv()\nclass Settings(BaseSettings):\n    API_V1_STR: str = \"/api/v1\"\n    SUPABASE_URL: str = Field(default_factory=lambda: os.getenv(\"SUPABASE_URL\"))\n    SUPABASE_KEY: str = Field(default_factory=lambda: os.getenv(\"SUPABASE_KEY\"))\n    SUPERUSER_EMAIL: str = Field(default_factory=lambda: os.getenv(\"SUPERUSER_EMAIL\"))",
        "detail": "src.app.core.config",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "src.app.core.config",
        "description": "src.app.core.config",
        "peekOfCode": "logger = logging.getLogger(__name__)\nload_dotenv()\nclass Settings(BaseSettings):\n    API_V1_STR: str = \"/api/v1\"\n    SUPABASE_URL: str = Field(default_factory=lambda: os.getenv(\"SUPABASE_URL\"))\n    SUPABASE_KEY: str = Field(default_factory=lambda: os.getenv(\"SUPABASE_KEY\"))\n    SUPERUSER_EMAIL: str = Field(default_factory=lambda: os.getenv(\"SUPERUSER_EMAIL\"))\n    SUPERUSER_PASSWORD: str = Field(default=lambda: os.getenv(\"SUPERUSER_PASSWORD\"))\n    # SERVER_NAME: str\n    SERVER_HOST: AnyHttpUrl = \"https://localhost\"",
        "detail": "src.app.core.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "kind": 5,
        "importPath": "src.app.core.config",
        "description": "src.app.core.config",
        "peekOfCode": "settings = Settings()",
        "detail": "src.app.core.config",
        "documentation": {}
    },
    {
        "label": "CRUDBase",
        "kind": 6,
        "importPath": "src.app.crud.base",
        "description": "src.app.crud.base",
        "peekOfCode": "class CRUDBase(Generic[ModelType, CreateSchemaType, UpdateSchemaType]):\n    def __init__(self, model: type[ModelType]):\n        self.model = model\n    async def get(self, db: AsyncClient, *, id: str) -> ModelType | None:\n        \"\"\"get by table_name by id\"\"\"\n        data, count = (\n            await db.table(self.model.table_name).select(\"*\").eq(\"id\", id).execute()\n        )\n        _, got = data\n        return self.model(**got[0]) if got else None",
        "detail": "src.app.crud.base",
        "documentation": {}
    },
    {
        "label": "ModelType",
        "kind": 5,
        "importPath": "src.app.crud.base",
        "description": "src.app.crud.base",
        "peekOfCode": "ModelType = TypeVar(\"ModelType\", bound=ResponseBase)\nCreateSchemaType = TypeVar(\"CreateSchemaType\", bound=CreateBase)\nUpdateSchemaType = TypeVar(\"UpdateSchemaType\", bound=UpdateBase)\nclass CRUDBase(Generic[ModelType, CreateSchemaType, UpdateSchemaType]):\n    def __init__(self, model: type[ModelType]):\n        self.model = model\n    async def get(self, db: AsyncClient, *, id: str) -> ModelType | None:\n        \"\"\"get by table_name by id\"\"\"\n        data, count = (\n            await db.table(self.model.table_name).select(\"*\").eq(\"id\", id).execute()",
        "detail": "src.app.crud.base",
        "documentation": {}
    },
    {
        "label": "CreateSchemaType",
        "kind": 5,
        "importPath": "src.app.crud.base",
        "description": "src.app.crud.base",
        "peekOfCode": "CreateSchemaType = TypeVar(\"CreateSchemaType\", bound=CreateBase)\nUpdateSchemaType = TypeVar(\"UpdateSchemaType\", bound=UpdateBase)\nclass CRUDBase(Generic[ModelType, CreateSchemaType, UpdateSchemaType]):\n    def __init__(self, model: type[ModelType]):\n        self.model = model\n    async def get(self, db: AsyncClient, *, id: str) -> ModelType | None:\n        \"\"\"get by table_name by id\"\"\"\n        data, count = (\n            await db.table(self.model.table_name).select(\"*\").eq(\"id\", id).execute()\n        )",
        "detail": "src.app.crud.base",
        "documentation": {}
    },
    {
        "label": "UpdateSchemaType",
        "kind": 5,
        "importPath": "src.app.crud.base",
        "description": "src.app.crud.base",
        "peekOfCode": "UpdateSchemaType = TypeVar(\"UpdateSchemaType\", bound=UpdateBase)\nclass CRUDBase(Generic[ModelType, CreateSchemaType, UpdateSchemaType]):\n    def __init__(self, model: type[ModelType]):\n        self.model = model\n    async def get(self, db: AsyncClient, *, id: str) -> ModelType | None:\n        \"\"\"get by table_name by id\"\"\"\n        data, count = (\n            await db.table(self.model.table_name).select(\"*\").eq(\"id\", id).execute()\n        )\n        _, got = data",
        "detail": "src.app.crud.base",
        "documentation": {}
    },
    {
        "label": "CRUDItem",
        "kind": 6,
        "importPath": "src.app.crud.crud_item",
        "description": "src.app.crud.crud_item",
        "peekOfCode": "class CRUDItem(CRUDBase[Item, ItemCreate, ItemUpdate]):\n    async def create(self, db: AsyncClient, *, obj_in: ItemCreate) -> Item:\n        return await super().create(db, obj_in=obj_in)\n    async def get(self, db: AsyncClient, *, id: str) -> Item | None:\n        return await super().get(db, id=id)\n    async def get_all(self, db: AsyncClient) -> list[Item]:\n        return await super().get_all(db)\n    async def get_multi_by_owner(self, db: AsyncClient, *, user: UserIn) -> list[Item]:\n        return await super().get_multi_by_owner(db, user=user)\n    async def update(self, db: AsyncClient, *, obj_in: ItemUpdate) -> Item:",
        "detail": "src.app.crud.crud_item",
        "documentation": {}
    },
    {
        "label": "item",
        "kind": 5,
        "importPath": "src.app.crud.crud_item",
        "description": "src.app.crud.crud_item",
        "peekOfCode": "item = CRUDItem(Item)",
        "detail": "src.app.crud.crud_item",
        "documentation": {}
    },
    {
        "label": "Token",
        "kind": 6,
        "importPath": "src.app.schemas.auth",
        "description": "src.app.schemas.auth",
        "peekOfCode": "class Token(BaseModel):\n    access_token: str | None = None\n    refresh_token: str | None = None\n# request\nclass UserIn(Token, User):\n    pass\n# Properties to receive via API on creation\n# in\nclass UserCreate(BaseModel):\n    pass",
        "detail": "src.app.schemas.auth",
        "documentation": {}
    },
    {
        "label": "UserIn",
        "kind": 6,
        "importPath": "src.app.schemas.auth",
        "description": "src.app.schemas.auth",
        "peekOfCode": "class UserIn(Token, User):\n    pass\n# Properties to receive via API on creation\n# in\nclass UserCreate(BaseModel):\n    pass\n# Properties to receive via API on update\n# in\nclass UserUpdate(UserAttributes):\n    pass",
        "detail": "src.app.schemas.auth",
        "documentation": {}
    },
    {
        "label": "UserCreate",
        "kind": 6,
        "importPath": "src.app.schemas.auth",
        "description": "src.app.schemas.auth",
        "peekOfCode": "class UserCreate(BaseModel):\n    pass\n# Properties to receive via API on update\n# in\nclass UserUpdate(UserAttributes):\n    pass\n# response\nclass UserInDBBase(BaseModel):\n    pass\n# Properties to return to client via api",
        "detail": "src.app.schemas.auth",
        "documentation": {}
    },
    {
        "label": "UserUpdate",
        "kind": 6,
        "importPath": "src.app.schemas.auth",
        "description": "src.app.schemas.auth",
        "peekOfCode": "class UserUpdate(UserAttributes):\n    pass\n# response\nclass UserInDBBase(BaseModel):\n    pass\n# Properties to return to client via api\n# out\nclass UserOut(Token):\n    pass\n# Properties properties stored in DB",
        "detail": "src.app.schemas.auth",
        "documentation": {}
    },
    {
        "label": "UserInDBBase",
        "kind": 6,
        "importPath": "src.app.schemas.auth",
        "description": "src.app.schemas.auth",
        "peekOfCode": "class UserInDBBase(BaseModel):\n    pass\n# Properties to return to client via api\n# out\nclass UserOut(Token):\n    pass\n# Properties properties stored in DB\nclass UserInDB(User):\n    pass",
        "detail": "src.app.schemas.auth",
        "documentation": {}
    },
    {
        "label": "UserOut",
        "kind": 6,
        "importPath": "src.app.schemas.auth",
        "description": "src.app.schemas.auth",
        "peekOfCode": "class UserOut(Token):\n    pass\n# Properties properties stored in DB\nclass UserInDB(User):\n    pass",
        "detail": "src.app.schemas.auth",
        "documentation": {}
    },
    {
        "label": "UserInDB",
        "kind": 6,
        "importPath": "src.app.schemas.auth",
        "description": "src.app.schemas.auth",
        "peekOfCode": "class UserInDB(User):\n    pass",
        "detail": "src.app.schemas.auth",
        "documentation": {}
    },
    {
        "label": "CreateBase",
        "kind": 6,
        "importPath": "src.app.schemas.base",
        "description": "src.app.schemas.base",
        "peekOfCode": "class CreateBase(BaseModel):\n    # inherent to add more properties for creating\n    pass\n# Properties to receive on item update\n# in\nclass UpdateBase(BaseModel):\n    # inherent to add more properties for updating\n    id: str\n# response\n# Properties shared by models stored in DB",
        "detail": "src.app.schemas.base",
        "documentation": {}
    },
    {
        "label": "UpdateBase",
        "kind": 6,
        "importPath": "src.app.schemas.base",
        "description": "src.app.schemas.base",
        "peekOfCode": "class UpdateBase(BaseModel):\n    # inherent to add more properties for updating\n    id: str\n# response\n# Properties shared by models stored in DB\nclass InDBBase(BaseModel):\n    id: str\n    user_id: str\n    created_at: str\n# Properties to return to client",
        "detail": "src.app.schemas.base",
        "documentation": {}
    },
    {
        "label": "InDBBase",
        "kind": 6,
        "importPath": "src.app.schemas.base",
        "description": "src.app.schemas.base",
        "peekOfCode": "class InDBBase(BaseModel):\n    id: str\n    user_id: str\n    created_at: str\n# Properties to return to client\n# curd model\n# out\nclass ResponseBase(InDBBase):\n    # inherent to add more properties for responding\n    table_name: ClassVar[str] = \"ResponseBase\".lower()",
        "detail": "src.app.schemas.base",
        "documentation": {}
    },
    {
        "label": "ResponseBase",
        "kind": 6,
        "importPath": "src.app.schemas.base",
        "description": "src.app.schemas.base",
        "peekOfCode": "class ResponseBase(InDBBase):\n    # inherent to add more properties for responding\n    table_name: ClassVar[str] = \"ResponseBase\".lower()\n    Config: ClassVar[ConfigDict] = ConfigDict(\n        extra=\"ignore\", arbitrary_types_allowed=True\n    )",
        "detail": "src.app.schemas.base",
        "documentation": {}
    },
    {
        "label": "ItemCreate",
        "kind": 6,
        "importPath": "src.app.schemas.item",
        "description": "src.app.schemas.item",
        "peekOfCode": "class ItemCreate(CreateBase):\n    test_data: str\n# Properties to receive on item update\n# in\nclass ItemUpdate(UpdateBase):\n    test_data: str\n# Properties to return to client\n# curd model\n# out\nclass Item(ResponseBase):",
        "detail": "src.app.schemas.item",
        "documentation": {}
    },
    {
        "label": "ItemUpdate",
        "kind": 6,
        "importPath": "src.app.schemas.item",
        "description": "src.app.schemas.item",
        "peekOfCode": "class ItemUpdate(UpdateBase):\n    test_data: str\n# Properties to return to client\n# curd model\n# out\nclass Item(ResponseBase):\n    test_data: str\n    table_name: ClassVar[str] = \"test_table\"\n# Properties properties stored in DB\nclass ItemInDB(InDBBase):",
        "detail": "src.app.schemas.item",
        "documentation": {}
    },
    {
        "label": "Item",
        "kind": 6,
        "importPath": "src.app.schemas.item",
        "description": "src.app.schemas.item",
        "peekOfCode": "class Item(ResponseBase):\n    test_data: str\n    table_name: ClassVar[str] = \"test_table\"\n# Properties properties stored in DB\nclass ItemInDB(InDBBase):\n    test_data: str",
        "detail": "src.app.schemas.item",
        "documentation": {}
    },
    {
        "label": "ItemInDB",
        "kind": 6,
        "importPath": "src.app.schemas.item",
        "description": "src.app.schemas.item",
        "peekOfCode": "class ItemInDB(InDBBase):\n    test_data: str",
        "detail": "src.app.schemas.item",
        "documentation": {}
    },
    {
        "label": "Massage",
        "kind": 6,
        "importPath": "src.app.schemas.msg",
        "description": "src.app.schemas.msg",
        "peekOfCode": "class Massage(BaseModel):\n    msg: str",
        "detail": "src.app.schemas.msg",
        "documentation": {}
    },
    {
        "label": "create_app",
        "kind": 2,
        "importPath": "src.app.main",
        "description": "src.app.main",
        "peekOfCode": "def create_app() -> FastAPI:\n    # init FastAPI with lifespan\n    app = FastAPI(\n        lifespan=lifespan,\n        title=settings.PROJECT_NAME,\n        openapi_url=f\"{settings.API_V1_STR}/openapi.json\",\n        generate_unique_id_function=lambda router: f\"{router.tags[0]}-{router.name}\",\n    )\n    # set CORS\n    # Set all CORS enabled origins",
        "detail": "src.app.main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "src.app.main",
        "description": "src.app.main",
        "peekOfCode": "app = create_app()\nif __name__ == \"__main__\":\n    host = \"localhost\"\n    port = 5000\n    uvicorn.run(app, host=host, port=port)",
        "detail": "src.app.main",
        "documentation": {}
    },
    {
        "label": "setup_logging",
        "kind": 2,
        "importPath": "tests.conftest",
        "description": "tests.conftest",
        "peekOfCode": "def setup_logging(level: int = logging.INFO) -> None:\n    logger = logging.getLogger()\n    logger.setLevel(level)\n    file_handler = RotatingFileHandler(\n        LOG_FILE, maxBytes=1024 * 1024 * 5, backupCount=5\n    )\n    file_handler.setLevel(level)\n    file_formatter = logging.Formatter(\n        \"%(asctime)s - %(name)s - %(levelname)s - %(message)s\"\n    )",
        "detail": "tests.conftest",
        "documentation": {}
    },
    {
        "label": "anyio_backend",
        "kind": 2,
        "importPath": "tests.conftest",
        "description": "tests.conftest",
        "peekOfCode": "def anyio_backend() -> str:\n    return \"asyncio\"\ndef pytest_configure(config: ConfigDict) -> None:\n    load_dotenv()\n@pytest.fixture(scope=\"module\")\ndef client() -> Generator[TestClient, None, None]:\n    with TestClient(app) as c:\n        yield c\n@pytest.fixture(scope=\"module\")\nasync def token() -> AsyncGenerator[Token, None]:",
        "detail": "tests.conftest",
        "documentation": {}
    },
    {
        "label": "pytest_configure",
        "kind": 2,
        "importPath": "tests.conftest",
        "description": "tests.conftest",
        "peekOfCode": "def pytest_configure(config: ConfigDict) -> None:\n    load_dotenv()\n@pytest.fixture(scope=\"module\")\ndef client() -> Generator[TestClient, None, None]:\n    with TestClient(app) as c:\n        yield c\n@pytest.fixture(scope=\"module\")\nasync def token() -> AsyncGenerator[Token, None]:\n    url = os.environ.get(\"SUPABASE_TEST_URL\")\n    assert url is not None, \"Must provide SUPABASE_TEST_URL environment variable\"",
        "detail": "tests.conftest",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 2,
        "importPath": "tests.conftest",
        "description": "tests.conftest",
        "peekOfCode": "def client() -> Generator[TestClient, None, None]:\n    with TestClient(app) as c:\n        yield c\n@pytest.fixture(scope=\"module\")\nasync def token() -> AsyncGenerator[Token, None]:\n    url = os.environ.get(\"SUPABASE_TEST_URL\")\n    assert url is not None, \"Must provide SUPABASE_TEST_URL environment variable\"\n    key = os.environ.get(\"SUPABASE_TEST_KEY\")\n    assert key is not None, \"Must provide SUPABASE_TEST_KEY environment variable\"\n    db_client = await create_client(url, key)",
        "detail": "tests.conftest",
        "documentation": {}
    },
    {
        "label": "LOG_FILE",
        "kind": 5,
        "importPath": "tests.conftest",
        "description": "tests.conftest",
        "peekOfCode": "LOG_FILE = Path(__file__).parent / \"scripts.log\"\ndef setup_logging(level: int = logging.INFO) -> None:\n    logger = logging.getLogger()\n    logger.setLevel(level)\n    file_handler = RotatingFileHandler(\n        LOG_FILE, maxBytes=1024 * 1024 * 5, backupCount=5\n    )\n    file_handler.setLevel(level)\n    file_formatter = logging.Formatter(\n        \"%(asctime)s - %(name)s - %(levelname)s - %(message)s\"",
        "detail": "tests.conftest",
        "documentation": {}
    },
    {
        "label": "get_auth_header",
        "kind": 2,
        "importPath": "tests.utils",
        "description": "tests.utils",
        "peekOfCode": "def get_auth_header(access_token: str | None) -> dict[str, str]:\n    if not access_token:\n        raise HTTPException(status_code=401, detail=\"No access token\")\n    return {\"Authorization\": f\"Bearer {access_token}\"}",
        "detail": "tests.utils",
        "documentation": {}
    },
    {
        "label": "run_cmd",
        "kind": 2,
        "importPath": "scripts",
        "description": "scripts",
        "peekOfCode": "def run_cmd(cmd: str) -> None:\n    subprocess.run(cmd, shell=True, check=True)\ndef run_tests() -> None:\n    # Install requirements by poetry\n    run_cmd(\"uv sync --all-extras --dev\")\n    # Run pre-commit tests\n    # run_cmd(\"poetry run pre-commit autoupdate\")\n    # run_cmd(\"poetry run pre-commit clean\")\n    # run_cmd(\"poetry run pre-commit install\")\n    run_cmd(\"uv run pre-commit run --all-files\")",
        "detail": "scripts",
        "documentation": {}
    },
    {
        "label": "run_tests",
        "kind": 2,
        "importPath": "scripts",
        "description": "scripts",
        "peekOfCode": "def run_tests() -> None:\n    # Install requirements by poetry\n    run_cmd(\"uv sync --all-extras --dev\")\n    # Run pre-commit tests\n    # run_cmd(\"poetry run pre-commit autoupdate\")\n    # run_cmd(\"poetry run pre-commit clean\")\n    # run_cmd(\"poetry run pre-commit install\")\n    run_cmd(\"uv run pre-commit run --all-files\")\n    # Generate coverage report --cov=./ --cov-report=xml --cov-report=html -vv\n    run_cmd(\"uv run pytest  --cov=./ --cov-report=xml --cov-report=html -vv\")",
        "detail": "scripts",
        "documentation": {}
    }
]
